{
  "name": "grunt-prettify",
  "description": "How your HTML looks after a six-pack.",
  "version": "0.1.3",
  "homepage": "https://github.com/jonschlinkert/grunt-prettify",
  "author": {
    "name": "jonschlinkert",
    "url": "http://github.com/jonschlinkert/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jonschlinkert/grunt-prettify.git"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/grunt-prettify/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jonschlinkert/grunt-prettify/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "assemble": "~0.3.72",
    "js-beautify": "~1.3.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-jshint": "~0.1.0",
    "grunt": "~0.4.1"
  },
  "keywords": [
    "beautifier",
    "beautify HTML",
    "beautify",
    "format HTML",
    "prettifier",
    "prettify HTML",
    "prettify",
    "gruntplugin",
    "grunt plugin"
  ],
  "readme": "# [grunt-prettify v0.1.3](https://github.com/jonschlinkert/grunt-prettify) [![Build Status](https://travis-ci.org/jonschlinkert/grunt-prettify.png)](https://travis-ci.org/jonschlinkert/grunt-prettify)\n\n> How your HTML looks after a six-pack.\n\n## Getting started\n_If you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide._\n\nFrom the same directory as your project's [Gruntfile][Getting Started] and [package.json][], install this plugin with the following command:\n\n```bash\nnpm install grunt-prettify --save-dev\n```\n\nOnce that's done, add this line to your project's Gruntfile:\n\n```js\ngrunt.loadNpmTasks('grunt-prettify');\n```\n\nIf the plugin has been installed correctly, running `grunt --help` at the command line should list the newly-installed plugin's task or tasks. In addition, the plugin should be listed in package.json as a `devDependency`, which ensures that it will be installed whenever the `npm install` command is run.\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n[package.json]: https://npmjs.org/doc/json.html\n\n\n## The \"prettify\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `prettify` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  prettify: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    }\n  }\n});\n```\n\n\n## The \"grunt-prettify\" task\n### Options\n\n#### options.indent_size\nType: `Number`\nDefault value: `2`\n\nThe indentation size to be used on the output HTML.\n\n#### options.indent_char\nType: `String`\nDefault value: `' '` (space)\n\nCharacter with which to indent the output HTML. You may use `space` or `tab` (use an actual space or tab, not the word).\n\n#### options.indent_scripts\nType: `String`\nDefault value: `normal` \n\nThe indentation character to use to indent the output HTML. You may use the following options: `keep|separate|normal`.\n\n#### options.brace_style\nType: `String`\nDefault value: `collapse`\n\nYou may use the following options:\n\n* `collapse`: the default, puts braces on the same line as control statements\n* `expand`: put all braces on their own lines (Allman / ANSI style)\n* `end-expand`: put _end_ braces on their own line.\n\n#### options.max_char\nType: `Number`\nDefault value: `0` (disabled)\n\nMaximum characters allowed per line. Use `0` to disable. \n\n#### options.unformatted\nType: `String|Array`\nDefault value: `[\"pre\", \"code\"]` \n\nArray of tags that should not be re-formatted in the output. Defaults to inline. \n\n_Attention:_ Make sure you play around with the settings and view the HTML in the browser. Pay special attention to whitespace around links and other inline elements, such as `<strong>` and `<span>`. If you specify a list of elements to remain `unformatted`, you will definitely need to make sure that whitepace is rendering the way you want it to. \n\n\n### Usage Examples\n\n#### Default Options\nThe default setup in this project's Gruntfile uses an external `.prettifyrc` file for controlling the task's options.\n\n```js\ngrunt.initConfig({\n  prettify: {\n    options: {\n      prettifyrc: '.prettifyrc'\n    },\n    files: {\n      'pretty/index.html': ['ugly/index.html']\n    }\n  }\n});\n```\n\nAnd the options are set to:\n``` json\n{\n  \"indent_size\": 2,\n  \"indent_char\": \" \",\n  \"indent_scripts\": \"normal\",\n  \"brace_style\": \"expand\",\n  \"max_char\": 0,\n  \"unformatted\": [\"pre\", \"code\"]\n}\n```\n\n#### Custom Options\nYou can \"internalize\" the options in the task if you wish, like this:\n\n```js\nprettify: {\n  options: {\n    indent_size: 2,\n    indent_char: ' ',\n    max_char: 78,\n    brace_style: 'expand',\n    unformatted: ['a', 'sub', 'sup', 'b', 'i', 'u']\n  },\n  ...\n}\n```\n\nExample configurations for prettifying one file at a time, or entire directories of files:\n\n```js\nprettify: {\n  options: {\n    prettifyrc: '.prettifyrc'\n  },\n  // Prettify a directory of files\n  all: {\n    expand: true, \n    cwd: 'test/actual/ugly/', \n    ext: '.html',\n    src: ['*.html'],\n    dest: 'test/actual/pretty/'\n  },\n  // Or prettify one file at a time using the \"files object\" format\n  files: {\n    'pretty/index.html': ['ugly/index.html']\n  },\n  // Or the \"compact\" src-dest format\n  one: {\n    src: 'test/actual/ugly/index.html',\n    dest: 'test/actual/pretty/index.html'\n  }\n}\n```\n\nSee the [grunt][] docs for more information about task configuration. \n\n[grunt]: http://gruntjs.com/\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Use [Assemble][assemble] to build and maintain your gh-pages, blog or documentation. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n\n\n\n## Author\n\n**Jon Schlinkert**\n\n+ [twitter.com/jonschlinkert](http://twitter.com/jonschlinkert)  \n+ [github.com/jonschlinkert](http://github.com/jonschlinkert)  \n\n\nAlso, this plugin is based on and uses [js-beautifier](http://jsbeautifier.org/). The authors and contributors of that project have my sincerest appreciation for their work:\n * Written by Nochum Sossonko, <nsossonko@hotmail.com>\n * Based on code initially developed by: [Einar Lielmanis](elfz@laacz.lv)\n * Many [other contributors](https://github.com/einars/js-beautify/contributors)\n * [Visit the project](https://github.com/einars/js-beautify)\n    \n\n## Release History\n* 2013-04-21    v0.1.1    Create plugin, run tests.Add assemble task to generate test HTML from templates.\n* 2013-04-21    v0.1.0    First commit.\n\n\n\n---\n_This file was generated using the [Assemble][] Grunt.js plugin, on Mon Apr 22 2013 21:50:04 GMT-0400 (Eastern Daylight Time)._\n\n<!-- assemble links -->\n\n[download]: https://github.com/assemble/assemble-examples-basic/archive/master.zip\n[assemble]: https://github.com/assemble/assemble/\n[assemble-examples]: https://github.com/assemble/assemble-examples\n\n[wiki]: https://github.com/assemble/assemble/wiki\n[data]: https://github.com/assemble/assemble/wiki/data\n[layouts]: https://github.com/assemble/assemble/wiki/layouts\n[markdown]: https://github.com/assemble/assemble/wiki/markdown\n[options]: https://github.com/assemble/assemble/wiki/options\n[partials]: https://github.com/assemble/assemble/wiki/partials\n\n\n<!-- grunt links -->\n\n[gruntfile]: http://gruntjs.com/sample-gruntfile\n[configuring tasks]: http://gruntjs.com/configuring-tasks\n[files-object]: http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically\n[tasks-and-targets]: http://gruntjs.com/configuring-tasks#task-configuration-and-targets",
  "readmeFilename": "README.md",
  "_id": "grunt-prettify@0.1.3",
  "dist": {
    "shasum": "451fb1acf5b791e76f2ff67c5774e07667f06498"
  },
  "_from": "grunt-prettify@",
  "_resolved": "https://registry.npmjs.org/grunt-prettify/-/grunt-prettify-0.1.3.tgz"
}
